# pyproject.toml

[build-system]
requires = ["setuptools>=61.0", "wheel"] # Specify build system dependencies
build-backend = "setuptools.build_meta"   # Specify the build backend (setuptools)
backend-path = ["."] # Specifies that the backend is in the project root, can be omitted if setup.py is not used with complex logic

[project]
name = "wheeledlab-suite"  # Name of the package
version = "0.1.0"          # Version of the package
description = "A comprehensive suite for wheeled robot simulation and reinforcement learning based on Isaac Lab."
readme = "README.md"       # Path to the README file
requires-python = ">=3.10" # Minimum Python version required
license = { text = "MIT" } # License information
keywords = ["isaaclab", "robotics", "simulation", "reinforcement learning", "wheeled robots"] # Keywords for discoverability
authors = [
    { name = "Wheeled Lab Project Developers" } # Author information
]
maintainers = [
    { name = "Wheeled Lab Project Developers" } # Maintainer information
]
classifiers = [ # PyPI classifiers
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", # If supported
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [ # Core dependencies for the project
    "psutil",
    "rich",
    "av",
    "rsl-rl-lib>=2.3.0",
    # "isaaclab", # Assuming isaaclab is pre-installed in the target environment. Add if it needs to be an explicit dependency.
]

[project.urls] # URLs related to the project
Homepage = "https://github.com/UWRobotLearning/WheeledLab"
Repository = "https://github.com/UWRobotLearning/WheeledLab"
# Documentation = "URL_TO_YOUR_DOCUMENTATION" # If you have separate documentation

# Optional: Define command-line scripts
# [project.scripts]
# wheeledlab-play = "wheeledlab_rl.scripts.play_policy:main" # Example script, adjust module and function
# wheeledlab-train = "wheeledlab_rl.scripts.train_rl:main"   # Example script, adjust module and function

[tool.setuptools]
# Tells setuptools that top-level packages are in the 'source' directory
package-dir = {"" = "source"}
# To include non-Python data files (like .usd, .json, etc.)
# Option 1: Use include-package-data = true and a MANIFEST.in file
include-package-data = true

[tool.setuptools.packages.find]
where = ["source"]  # Look for packages in the 'source' directory
# Include all packages starting with these names, recursively
include = ["wheeledlab*", "wheeledlab_assets*", "wheeledlab_rl*", "wheeledlab_tasks*"]
# Alternatively, to only include top-level packages:
# packages = ["wheeledlab", "wheeledlab_assets", "wheeledlab_rl", "wheeledlab_tasks"]

# Option 2: Specify package_data directly (more explicit for simple cases)
# [tool.setuptools.package-data]
# "wheeledlab_assets" = ["*.usd", "data/**/*"] # Example: include all .usd files and everything under data/ in wheeledlab_assets
# "wheeledlab_tasks" = ["config/**/*.yaml", "config/**/*.json"] # Example for task config files
